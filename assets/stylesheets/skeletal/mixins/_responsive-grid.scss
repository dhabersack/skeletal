// Set `margin`, `padding` and `width` for a container occupying a set number of
// columns within the responsive grid.
//
// Parameters:
// `number-of-columns`: the number of columns this container should occupy
// `margin-top`:        the margin-top of this container
// `margin-bottom`:     the margin-bottom of this container
// `padding`:           the padding of this container
// `center`:            whether or not this container should be centered
// `breakpoints`:       list of breakpoints these settings should be used for;
//                      can be one or more of 'small', 'medium', 'large' or
//                      'extra-large'
// `break-every-nth`:   after how many items this container should break into a
//                      new line
@mixin grid($number-of-columns,
    $margin-top: 0,
    $margin-bottom: 0,
    $padding: 0,
    $center: false,
    $breakpoints: ('small', 'medium', 'large', 'extra-large'),
    $break-every-nth: 0) {
  $does-include-small:       false;
  $does-include-medium:      false;
  $does-include-large:       false;
  $does-include-extra-large: false;

  @each $breakpoint in $breakpoints {
         @if ($breakpoint == 'small'      ) { $does-include-small:       true; }
    @else if ($breakpoint == 'medium'     ) { $does-include-medium:      true; }
    @else if ($breakpoint == 'large'      ) { $does-include-large:       true; }
    @else if ($breakpoint == 'extra-large') { $does-include-extra-large: true; }
  }

  // extract padding-values from parameter
  $padding-top:    nth($padding, 1);
  $padding-right:  $padding-top;
  $padding-bottom: $padding-top;
  $padding-left:   $padding-top;

  // update padding-values
  @if (length($padding) >= 2) {
    $padding-right: nth($padding, 2);
    $padding-left:  $padding-right;
  }

  @if (length($padding) >= 3) {
    $padding-bottom: nth($padding, 3);
  }

  @if (length($padding) >= 4) {
    $padding-left: nth($padding, 4);
  }

  @if ($does-include-small == true) {
    @media (#{ $media-query-small }) {
      $margin: $margin-top $grid-small-gutter-width $margin-bottom 0;
      @if ($center == true) {
        $margin: $margin-top auto $margin-bottom;
      }

      @include print-grid-values(
        $media-query-small,
        $margin,
        $padding-top $padding-right $padding-bottom $padding-left,
        ($number-of-columns * $grid-small-column-width) + (($number-of-columns - 1) * $grid-small-gutter-width) - $padding-right - $padding-left,
        $break-every-nth
      );
    }
  }

  @if ($does-include-medium == true) {
    @media (#{ $media-query-medium }) {
      $margin:  $margin-top $grid-medium-gutter-width $margin-bottom 0;
      @if ($center == true) {
        $margin: $margin-top auto $margin-bottom;
      }

      @include print-grid-values(
        $media-query-medium,
        $margin,
        $padding-top $padding-right $padding-bottom $padding-left,
        ($number-of-columns * $grid-medium-column-width) + (($number-of-columns - 1) * $grid-medium-gutter-width) - $padding-right - $padding-left,
        $break-every-nth
      );
    }
  }

  @if ($does-include-large == true) {
    @media (#{ $media-query-large }) {
      $margin: $margin-top $grid-large-gutter-width $margin-bottom 0;
      @if ($center == true) {
        $margin: $margin-top auto $margin-bottom;
      }

      @include print-grid-values(
        $media-query-large,
        $margin,
        $padding-top $padding-right $padding-bottom $padding-left,
        ($number-of-columns * $grid-large-column-width) + (($number-of-columns - 1) * $grid-large-gutter-width) - $padding-right - $padding-left,
        $break-every-nth
      );
    }
  }

  @if ($does-include-extra-large == true) {
    @media (#{ $media-query-extra-large }) {
      $margin: $margin-top $grid-extra-large-gutter-width $margin-bottom 0;
      @if ($center == true) {
        $margin: $margin-top auto $margin-bottom;
      }

      @include print-grid-values(
        $media-query-extra-large,
        $margin,
        $padding-top $padding-right $padding-bottom $padding-left,
        ($number-of-columns * $grid-extra-large-column-width) + (($number-of-columns - 1) * $grid-extra-large-gutter-width) - $padding-right - $padding-left,
        $break-every-nth
      );
    }
  }

  // default, one-column, mobile-first layout
  float: none;
  margin: $margin-top 0 $margin-bottom;
  padding: $padding-top 0 $padding-bottom;
  width: 100%;
}

@mixin print-grid-values($breakpoint,
    $margin,
    $padding,
    $width,
    $break-every-nth) {
  @media (#{ $breakpoint }) {
    @if ($break-every-nth != 0) {
      &:nth-of-type(#{ $break-every-nth }n) {
        margin-right: 0;
      }

      &:nth-of-type(#{ $break-every-nth }n + 1) {
        clear: both;
      }
    }

    margin: $margin;
    padding: $padding;
    width: $width;
  }
}
